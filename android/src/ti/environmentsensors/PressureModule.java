/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.environmentsensors;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;

import android.app.Activity;
import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;

import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

@Kroll.module(parentModule=EnvironmentsensorsModule.class name = "Environmentsensors", id = "ti.environmentsensors")
public class PressureModule extends KrollModule {

	// Standard Debugging variables
	private static final String LCAT = "EnvironmentsensorsModule";
	private SensorManager sensorManager;
	private Sensor pressure;
	private Sensor relativehuminity;
	private Sensor light;
	private Sensor ambienttemperature;
	private Sensor temperature;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public EnvironmentsensorsModule() {
		super();
		SensorManager sensorManager = (SensorManager) TiApplication.getAppRootOrCurrentActivity()
				.getSystemService(Context.SENSOR_SERVICE);
		pressure = sensorManager.getDefaultSensor(Sensor.TYPE_PRESSURE);
		relativehuminity = sensorManager.getDefaultSensor(Sensor.TYPE_RELATIVE_HUMIDITY);
		ambienttemperature = sensorManager.getDefaultSensor(Sensor.TYPE_AMBIENT_TEMPERATURE);
		temperature = sensorManager.getDefaultSensor(Sensor.TYPE_TEMPERATURE);
		relativehuminity = sensorManager.getDefaultSensor(Sensor.TYPE_RELATIVE_HUMIDITY);
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}


	// Properties
	@Kroll.method
	public void register(int Sensor.TYPE_PRESSURE) {
		Log.d(LCAT, "get example property");
		sensorManager.registerListener(this, pressure, SensorManager.SENSOR_DELAY_NORMAL);

	}

	@Kroll.method
	public void stop() {
		Log.d(LCAT, "get example property");
	}

	@Override
	public void onResume(Activity activity) {
		// Register a listener for the sensor.
		super.onResume(activity);
		sensorManager.registerListener(this, pressure, SensorManager.SENSOR_DELAY_NORMAL);
	}

	@Override
	public void onPause(Activity activity) {
		// Be sure to unregister the sensor when the activity pauses.
		super.onPause(activity);
		sensorManager.unregisterListener(this);
	}

	@Override
	public void onDestroy(Activity activity) {
		// This method is called when the root context is being destroyed

		Log.d(LCAT, "[MODULE LIFECYCLE EVENT] destroy");

		super.onDestroy(activity);
		sensorManager.unregisterListener(this);
	}

}
